import { test, expect } from '@playwright/test';
import { RealImageUtils } from './real-image-utils';

test.describe('Validaci√≥n de Tama√±o de Im√°genes - Funcionalidad Principal', () => {

  // Helper para crear imagen grande que active la alerta
  const createLargeImage = (name: string, sizeKB: number) => {
    console.log(`üì∑ Creando imagen simulada grande: ${name} (${(sizeKB/1024).toFixed(1)}MB)`);
    return RealImageUtils.createFallbackImage(name, sizeKB);
  };

  // Helper para configurar listener de alertas
  const setupAlertListener = (page: any) => {
    let alertMessage = '';
    let alertDetected = false;

    page.on('dialog', async (dialog: any) => {
      console.log(`üö® ALERTA DETECTADA: ${dialog.type()}`);
      console.log(`üìù Mensaje: ${dialog.message()}`);
      alertMessage = dialog.message();
      alertDetected = true;
      
      // Tomar screenshot inmediatamente cuando se detecta la alerta
      const timestamp = Date.now();
      const screenshotPath = `test-results/alert-screenshots/alerta-${timestamp}.png`;
      
      // Crear directorio si no existe
      const fs = require('fs');
      const path = require('path');
      const dir = path.dirname(screenshotPath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      // Captura simple y r√°pida sin timeout personalizado
      page.screenshot({ path: screenshotPath }).then(() => {
        console.log(`üì∏ Screenshot de alerta guardado: ${screenshotPath}`);
      }).catch((error: any) => {
        console.log(`‚ö†Ô∏è Error al tomar screenshot: ${error.message}`);
        // Intentar captura b√°sica como fallback
        page.screenshot({ path: screenshotPath, timeout: 5000 }).catch(() => {
          console.log(`‚ùå Screenshot fall√≥ completamente`);
        });
      });
      
      // Aceptar la alerta inmediatamente
      await dialog.accept();
      console.log(`‚úÖ Alerta aceptada correctamente`);
    });

    return { getAlertMessage: () => alertMessage, isAlertDetected: () => alertDetected };
  };

  test('PRINCIPAL: debe mostrar alerta en LOGO cuando excede el tama√±o', async ({ page }) => {
    console.log('üß™ Probando alerta en campo LOGO (principal)...');
    
    const { getAlertMessage, isAlertDetected } = setupAlertListener(page);
    
    // Ir al formulario
    await page.goto('/?test=true');
    
    // Llenar campos m√≠nimos del paso 1
    await page.fill('input[name="companyName"]', 'Test Company');
    await page.fill('input[name="contactPerson"]', 'Juan P√©rez');
    await page.fill('input[name="phone"]', '+54 9 11 1234-5678');
    await page.fill('input[name="email"]', 'juan@test.com');
    
    // Subir imagen grande en el logo
    console.log('üì§ Subiendo imagen grande en LOGO...');
    const largeImage = createLargeImage('logo-gigante.jpg', 15000); // 15MB
    await page.setInputFiles('#logo-upload', largeImage, { timeout: 15000 });
    
    // Esperar para que se procese
    await page.waitForTimeout(5000);
    
    // Verificar que se detect√≥ la alerta
    console.log(`üîç Alerta detectada: ${isAlertDetected()}`);
    console.log(`üìù Mensaje: "${getAlertMessage()}"`);
    
    expect(isAlertDetected()).toBe(true);
    expect(getAlertMessage()).toContain('grande');
    console.log('‚úÖ Alerta detectada correctamente en LOGO');
  });

  test('VERIFICACI√ìN: debe mostrar alerta inmediatamente al subir imagen grande', async ({ page }) => {
    console.log('üß™ Verificando que la alerta aparece INMEDIATAMENTE...');
    
    const { getAlertMessage, isAlertDetected } = setupAlertListener(page);
    
    // Ir al formulario
    await page.goto('/?test=true');
    
    // Llenar campos m√≠nimos
    await page.fill('input[name="companyName"]', 'Test Company Inmediato');
    await page.fill('input[name="contactPerson"]', 'Mar√≠a Gonz√°lez');
    await page.fill('input[name="phone"]', '+54 9 11 5555-5555');
    await page.fill('input[name="email"]', 'maria@test.com');
    
    // Subir imagen EXTRA grande para garantizar la alerta
    console.log('üì§ Subiendo imagen EXTRA grande...');
    const extraLargeImage = createLargeImage('logo-extra-gigante.jpg', 20000); // 20MB
    await page.setInputFiles('#logo-upload', extraLargeImage);
    
    // Esperar solo 2 segundos - la alerta debe aparecer inmediatamente
    await page.waitForTimeout(2000);
    
    // Verificar que se detect√≥ la alerta r√°pidamente
    console.log(`üîç Alerta detectada inmediatamente: ${isAlertDetected()}`);
    console.log(`üìù Mensaje inmediato: "${getAlertMessage()}"`);
    
    expect(isAlertDetected()).toBe(true);
    expect(getAlertMessage()).toMatch(/grande|tama√±o|MB|l√≠mite/i);
    console.log('‚úÖ Alerta aparece INMEDIATAMENTE al subir imagen grande');
  });

  test('FUNCIONALIDAD: debe impedir env√≠o del formulario con imagen grande', async ({ page }) => {
    console.log('üß™ Verificando que imagen grande impide env√≠o del formulario...');
    
    const { getAlertMessage, isAlertDetected } = setupAlertListener(page);
    
    // Ir al formulario
    await page.goto('/?test=true');
    
    // Llenar todos los campos obligatorios del paso 1
    await page.fill('input[name="companyName"]', 'Test Company Env√≠o');
    await page.fill('input[name="contactPerson"]', 'Carlos Rodr√≠guez');
    await page.fill('input[name="phone"]', '+54 9 11 7777-7777');
    await page.fill('input[name="email"]', 'carlos@test.com');
    await page.fill('textarea[name="brandColors"]', 'Verde y amarillo');
    
    // Subir imagen grande
    console.log('üì§ Subiendo imagen grande que debe impedir env√≠o...');
    const largeImage = createLargeImage('logo-bloqueo.jpg', 18000); // 18MB
    await page.setInputFiles('#logo-upload', largeImage);
    
    // Esperar para que se procese
    await page.waitForTimeout(3000);
    
    // Verificar que se detect√≥ la alerta
    expect(isAlertDetected()).toBe(true);
    console.log('‚úÖ Alerta detectada - imagen grande bloquea correctamente');
    
    // Intentar avanzar al siguiente paso (deber√≠a fallar o mostrar error)
    console.log('üîÑ Intentando avanzar con imagen grande...');
    await page.click('button:has-text("Siguiente")');
    await page.waitForTimeout(2000);
    
    // Verificar que seguimos en el paso 1 (no avanz√≥)
    const step1Still = await page.locator('text=Paso 1 de 9').isVisible();
    console.log(`üìç Sigue en Paso 1: ${step1Still}`);
    
    // Si avanz√≥, verificar que hay alg√∫n mensaje de error
    if (!step1Still) {
      const errorMessages = await page.locator('.error, .alert-error, [role="alert"]').count();
      console.log(`‚ö†Ô∏è Mensajes de error encontrados: ${errorMessages}`);
    }
    
    console.log('‚úÖ Funcionalidad de bloqueo verificada');
  });
});